DROP TABLE AUDITAR_EMPLE CASCADE CONSTRAINTS;
CREATE TABLE AUDITAR_EMPLE(
    COL1 VARCHAR(200)
);


-- 1
CREATE OR REPLACE TRIGGER AUDITAR_SUBIDA_SALARIO
    AFTER UPDATE OF SALARIO ON EMPLE
    FOR EACH ROW

BEGIN
    INSERT INTO AUDITAR_EMPLE VALUES('Subida salario empleado ' || :OLD.EMP_NO);

END;
/
UPDATE EMPLE
    SET SALARIO = SALARIO + 100
    WHERE APELLIDO = 'ARROYO' OR APELLIDO = 'SANCHEZ';


-- 2
CREATE OR REPLACE TRIGGER AUDITAR_ELIMINACION_EMPLE
    BEFORE DELETE ON EMPLE
    FOR EACH ROW

BEGIN
    INSERT INTO AUDITAR_EMPLE VALUES('Borrado empleado ' || :OLD.EMP_NO || ', ' || :OLD.APELLIDO || ', ' || :OLD.DEPT_NO);

END;
/
DELETE FROM EMPLE
    WHERE APELLIDO = 'MARIO';


-- 3
CREATE OR REPLACE TRIGGER AUDITAR_ELIMINACION_EMPLE
    BEFORE DELETE ON EMPLE
    FOR EACH ROW
    WHEN (OLD.OFICIO = 'PRESIDENTE')

BEGIN
    INSERT INTO AUDITAR_EMPLE VALUES('Borrado presidente ' || :OLD.EMP_NO || ', ' || :OLD.APELLIDO || ', ' || :OLD.DEPT_NO);

END;
/
DELETE FROM EMPLE
    WHERE OFICIO = 'PRESIDENTE';


-- 4
CREATE OR REPLACE TRIGGER AUDITAR_OPERACIONES
    BEFORE INSERT OR DELETE ON EMPLE
    FOR EACH ROW

BEGIN
    CASE
        WHEN INSERTING THEN
            INSERT INTO AUDITAR_EMPLE VALUES(SYSDATE || ' | ' || :NEW.EMP_NO || ' | ' || :NEW.APELLIDO || ' | ' || 'INSERCION');
        WHEN DELETING THEN
            INSERT INTO AUDITAR_EMPLE VALUES(SYSDATE || ' | ' || :OLD.EMP_NO || ' | ' || :OLD.APELLIDO || ' | ' || 'BORRADO');
    END CASE;

END;
/
INSERT INTO EMPLE(EMP_NO, APELLIDO, DEPT_NO) VALUES(9001, 'PRUEBA 1', 10);
INSERT INTO EMPLE(EMP_NO, APELLIDO, DEPT_NO) VALUES(9002, 'PRUEBA 2', 20);
DELETE FROM EMPLE WHERE EMP_NO = 9001 OR EMP_NO = 9002;


-- 5
CREATE TABLE CONTROL_CONEXIONES(
    USUARIO VARCHAR2(20),
    MOMENTO TIMESTAMP,
    EVENTO VARCHAR2(20)
);
CREATE OR REPLACE TRIGGER AUDITAR_CONEXIONES
    AFTER LOGON 
    ON DATABASE

BEGIN
    INSERT INTO CONTROL_CONEXIONES(USUARIO, MOMENTO, EVENTO) VALUES(ORA_LOGIN_USER,SYSTIMESTAMP, ORA_SYSEVENT);
    
END;
/

CREATE OR REPLACE TRIGGER VerificarStockPrevioPedido
BEFORE INSERT OR UPDATE ON LINEA_PEDIDO
FOR EACH ROW
DECLARE
  v_stock_actual NUMBER;
  v_nombre_producto PRODUCTOS.NOMBRE_P%TYPE;
BEGIN
  SELECT STOCK, NOMBRE_P INTO v_stock_actual, v_nombre_producto FROM PRODUCTOS WHERE NOMBRE_P = :NEW.CODIGO;

  IF v_stock_actual - :NEW.CANTIDAD < 5 THEN
    DBMS_OUTPUT.PUT_LINE('Queda poco stock de ' || v_nombre_producto || '. Pronto solo quedarÃ¡ ' || (v_stock_actual - :NEW.CANTIDAD) || ' unidades.');
  END IF;

  IF v_stock_actual < :NEW.CANTIDAD < 0 THEN
    RAISE_APPLICATION_ERROR(-20001, 'No hay suficiente stock para realizar el pedido.');
  END IF;
END;
/