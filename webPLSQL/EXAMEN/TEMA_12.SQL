CONNECT SYSTEM/system
SET SERVEROUTPUT ON;
SET VERIFY OFF;
SET LINESIZE 150;

/**
 * Si pides valores con variables de acoplamiento,
 * sin comillas para NUMBER
 * y con comillas para DATE | VARCHAR
*/

/* BLOQUES ANONIMOS */
--1
BEGIN
    DBMS_OUTPUT.PUT_LINE('Hola');
    END;
    /

--2
DECLARE
    V_NUM NUMBER := 0;

    BEGIN
        SELECT COUNT(*) INTO V_NUM FROM EMPLE;
        DBMS_OUTPUT.PUT_LINE('NUM_FILAS = ' || V_NUM);
    END;
    /

--3
DECLARE
    V_APELLIDO VARCHAR2(10);
    V_OFICIO VARCHAR2(10);

    BEGIN 
        SELECT APELLIDO, OFICIO INTO V_APELLIDO, V_OFICIO FROM EMPLE
        WHERE EMP_NO= 7900;
        DBMS_OUTPUT.PUT_LINE(V_APELLIDO || ' ES ' || V_OFICIO);
    END;
    /

--4 NO FUNCIONA
DECLARE
    V_PRECIO NUMBER;

BEGIN
    SELECT PRECIO_COSTO INTO V_PRECIO
        FROM ARTICULOS
        WHERE UPPER(ARTICULO) = 'CANUTILLOS'
        AND UPPER(CATEGORIA) = 'PRIMERA';

    DBMS_OUTPUT.PUT_LINE('PRECIO = ' || V_PRECIO);

END;
/

--5
DECLARE
    V_APELLIDO EMPLE.APELLIDO%TYPE;

BEGIN
    SELECT APELLIDO INTO V_APELLIDO FROM EMPLE
    WHERE EMP_NO = &vn_emp; --VARIABLE QUE ME INVENTO Y NO DECLARO

    DBMS_OUTPUT.PUT_LINE(V_APELLIDO);
END;
/

--6
BEGIN
    DBMS_OUTPUT.PUT_LINE(
        TO_CHAR(SYSDATE, 'DAY " DIA " DD " DE " MONTH " DE " YYYY " A LAS " HH:MI:SS')
    );
END;
/

--7 
    --(IF) --COMENZAR CON 30 =>Introduzca un valor para vt_empno: 7839
DECLARE
    V_EMPNO EMPLE.EMP_NO%TYPE := &vt_empno;
    V_OFICIO EMPLE.OFICIO%TYPE;
    V_EMPLEADOS NUMBER;
    V_AUMENTO NUMBER;

BEGIN
    SELECT COUNT(*) INTO V_EMPLEADOS
        FROM EMPLE
        WHERE DIR = V_EMPNO;

    SELECT OFICIO INTO V_OFICIO
        FROM EMPLE
        WHERE EMP_NO = V_EMPNO;

    IF V_EMPLEADOS = 0 THEN
        V_AUMENTO := 50;
    ELSIF V_EMPLEADOS = 1 THEN
        V_AUMENTO := 80;
    ELSIF V_EMPLEADOS = 2 THEN
        V_AUMENTO := 100;
    ELSE
        V_AUMENTO := 110;
    END IF;

    IF UPPER(V_OFICIO) = 'PRESIDENTE' THEN
        V_AUMENTO := V_AUMENTO + 30;
    END IF;

    DBMS_OUTPUT.PUT_LINE('=> ES ' || V_OFICIO || ', Y TIENE ' || V_EMPLEADOS || ' EMPLEADOS A SU CARGO. =>AUMENTO DE: ' || V_AUMENTO || ' EUROS');

    --ACTUALIZAR EL SALARIO
    UPDATE EMPLE
        SET SALARIO = SALARIO + V_AUMENTO
        WHERE EMP_NO = V_EMPNO;

END;
/
    --ACTUALIZAR EL SALARIO
    UPDATE EMPLE
        SET SALARIO = SALARIO + V_AUMENTO
        WHERE EMP_NO = V_EMPNO;

    --CON (CASE)
DECLARE
    V_EMPNO EMPLE.EMP_NO%TYPE := &vt_empno;
    V_OFICIO EMPLE.OFICIO%TYPE;
    V_EMPLEADOS NUMBER;
    V_AUMENTO NUMBER;

BEGIN
    SELECT COUNT(*) INTO V_EMPLEADOS
        FROM EMPLE
        WHERE DIR = V_EMPNO;

    SELECT OFICIO INTO V_OFICIO
        FROM EMPLE
        WHERE EMP_NO = V_EMPNO;

    CASE V_EMPLEADOS
        WHEN 0 THEN V_AUMENTO := 50;
        WHEN 1 THEN V_AUMENTO := 80;
        WHEN 2 THEN V_AUMENTO := 100;
        ELSE V_AUMENTO := 110;
    END CASE;

    CASE
        WHEN UPPER(V_OFICIO) = 'PRESIDENTE' THEN V_AUMENTO := V_AUMENTO + 30;
    END CASE;

    DBMS_OUTPUT.PUT_LINE('=>ES ' || V_OFICIO || ' Y TIENE ' || V_EMPLEADOS || ' EMPLEADOS A SU CARGO. =>AUMENTO DE ' || V_AUMENTO || ' EUROS');

    --ACTUALIZAR
    /*UPDATE EMPLE
        SET SALARIO = SALARIO + V_AUMENTO
        WHERE EMP_NO = V_EMPNO;*/

END;
/

--8 ESCRIBIR HOLA AL REVES CON BUCLES

    --CON BUCLE FOR
DECLARE 
    TEXTO VARCHAR2(20) := 'HOLA';
    AL_REVES TEXTO%TYPE;

BEGIN
    FOR I IN REVERSE 1..LENGTH(TEXTO) LOOP
        AL_REVES := AL_REVES || SUBSTR(TEXTO, I, 1);
    END LOOP;

    DBMS_OUTPUT.PUT_LINE(TEXTO || ' AL REVES ES ' || AL_REVES);

END;
/

    --CON BUCLE WHILE
DECLARE 
    TEXTO VARCHAR2(20) := 'HOLA';
    AL_REVES TEXTO%TYPE;
    I NUMBER;

BEGIN
    WHILE I != 0 LOOP 
        AL_REVES := AL_REVES || SUBSTR(TEXTO, I, 1);
        I := I - 1;
    END LOOP;

    DBMS_OUTPUT.PUT_LINE(TEXTO || ' AL REVES ES ' || AL_REVES);

END;
/

    --CON BUCLE LOOP
DECLARE 
    TEXTO VARCHAR2(20) := 'HOLA';
    AL_REVES TEXTO%TYPE;
    I NUMBER;

BEGIN
    LOOP 
        EXIT WHEN I = 0;
        AL_REVES := AL_REVES || SUBSTR(TEXTO, I, 1);
        I := I - 1;
    END LOOP;

    DBMS_OUTPUT.PUT_LINE(TEXTO || ' AL REVES ES ' || AL_REVES);

END;
/

--9 SUMA BLOQUE ANONIMO
DECLARE
    NUM1 NUMBER := &num1;
    NUM2 NUM1%TYPE := &num2;
    RESULTADO NUM2%TYPE := NUM1 + NUM2;

BEGIN
    DBMS_OUTPUT.PUT_LINE('TOTAL SUMA = ' || RESULTADO);
END;
/

----------------------------------------------------------------
/* PROCEDIMIENTOS */

--10 SUMA CON PROCEDIMIENTO
CREATE OR REPLACE PROCEDURE SUMA(
    NUM1 NUMBER, NUM2 NUMBER
)
IS
    RESULTADO NUMBER := NUM1 + NUM2;

BEGIN
    DBMS_OUTPUT.PUT_LINE('SUMA = ' || RESULTADO);

END;
/
EXECUTE SUMA(20, 20);

--11 
CREATE OR REPLACE PROCEDURE CONSULTA_DEPT(
    V_DEPTNO NUMBER
)
IS
    V_NOMBRE DEPART.DNOMBRE%TYPE;
    V_LOCALIDAD DEPART.LOC%TYPE;

BEGIN
    SELECT DNOMBRE, LOC INTO V_NOMBRE, V_LOCALIDAD
        FROM DEPART
        WHERE DEPT_NO = V_DEPTNO;

    DBMS_OUTPUT.PUT_LINE('Numero Depto: ' || V_DEPTNO);
    DBMS_OUTPUT.PUT_LINE('Nombre: ' || V_NOMBRE);
    DBMS_OUTPUT.PUT_LINE('Localidad: ' || V_LOCALIDAD);

    /*DBMS_OUTPUT.PUT_LINE('Numero Depto: ' || V_DEPTNO ||'Nombre: ' || V_NOMBRE || 'Localidad: ' || V_LOCALIDAD);*/

EXCEPTION
    WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('No se ha encontrado el departamento!!');

END;
/
/*EJECUTA Y PARA LA EXCEPCIONS*/
EXECUTE CONSULTA_DEPT(20);
EXECUTE CONSULTA_DEPT(50);

-- 12
CREATE OR REPLACE PROCEDURE CAMBIAR_OFICIO(
    V_EMPNO NUMBER, V_OFICIO VARCHAR
)
IS
    V_NOMBRE EMPLE.APELLIDO%TYPE;
    V_OFICIO_ANTIGUO EMPLE.OFICIO%TYPE;

BEGIN
    SELECT APELLIDO, OFICIO INTO V_NOMBRE, V_OFICIO_ANTIGUO
        FROM EMPLE
        WHERE EMP_NO = V_EMPNO;

    DBMS_OUTPUT.PUT_LINE('ANTES: ' || V_NOMBRE || ', ' || V_OFICIO_ANTIGUO);

    UPDATE EMPLE
        SET OFICIO = V_OFICIO
        WHERE EMP_NO = V_EMPNO;

    DBMS_OUTPUT.PUT_LINE('DESPUES: ' || V_NOMBRE || ', ' || V_OFICIO);

EXCEPTION
    WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('No se ha encontrado el empleado');

END;
/
EXECUTE CAMBIAR_OFICIO(7369, 'VENDEDOR');

--13
CREATE OR REPLACE PROCEDURE CAMBIAR_PRECIO(
    V_NOMBRE VARCHAR, V_PRECIO NUMBER, V_CATEGORIA VARCHAR
)
IS
    V_PRECIO_ANTIGUO ARTICULOS.PRECIO_COSTO%TYPE;

BEGIN
    SELECT PRECIO_COSTO INTO V_PRECIO_ANTIGUO
        FROM ARTICULOS
        WHERE UPPER(ARTICULO) = UPPER(V_NOMBRE)
        AND UPPER(CATEGORIA) = UPPER(V_CATEGORIA);

    IF V_PRECIO_ANTIGUO * 1.02 < V_PRECIO THEN
        DBMS_OUTPUT.PUT_LINE('=> El nuevo precio supera el 2%; Sin cambios.');
    ELSE
        UPDATE ARTICULOS
            SET PRECIO_COSTO = V_PRECIO
            WHERE UPPER(ARTICULO) = (V_NOMBRE)
            AND UPPER(CATEGORIA) = UPPER(V_CATEGORIA);

        DBMS_OUTPUT.PUT_LINE('=> Se ha cambiado el precio a: ' || V_PRECIO);
    END IF;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('==> No se ha encontrado el articulo!!');

END;
/
/*1 supera el precio, 2 EXCEPTION, 3se cambia precio */
EXECUTE CAMBIAR_PRECIO('mantequilla', 3, 'segunda');
EXECUTE CAMBIAR_PRECIO('MANTEQUILLAA', 3, 'segunda');
EXECUTE CAMBIAR_PRECIO('mantequilla', 2.02, 'segunda');

--14
CREATE OR REPLACE PROCEDURE REVES(
    V_CADENA VARCHAR2
)
IS
    AL_REVES VARCHAR2(100);

BEGIN
    FOR I IN REVERSE 1..LENGTH(V_CADENA) LOOP
        AL_REVES := AL_REVES || SUBSTR(V_CADENA, I, 1);
    END LOOP;

    DBMS_OUTPUT.PUT_LINE(AL_REVES);

END;
/
EXECUTE REVES('HOLA');

/* FUNCIONES */
--15
CREATE OR REPLACE FUNCTION SUMAR_NUMEROS(
    NUM1 NUMBER, NUM2 NUMBER
)
RETURN NUMBER
IS
BEGIN
    RETURN (NUM1 + NUM2);

END;
/
-- FORMA DE COMPROBAR 1
SELECT SUMAR_NUMEROS(10, 2) FROM DUAL;

-- FORMA DE COMPROBAR 2
BEGIN DBMS_OUTPUT.PUT_LINE(SUMAR_NUMEROS(10, 2));
END;
/

--16
CREATE OR REPLACE FUNCTION CADENA_AL_REVES(
    CADENA VARCHAR2
)
RETURN VARCHAR2
IS
    AL_REVES VARCHAR2(100);

BEGIN
    FOR I IN REVERSE 1..LENGTH(CADENA) LOOP
        AL_REVES := AL_REVES || SUBSTR(CADENA, I, 1);
    END LOOP;

    RETURN AL_REVES;

END;
/
SELECT CADENA_AL_REVES('HOLA') FROM DUAL;

BEGIN DBMS_OUTPUT.PUT_LINE(CADENA_REVES_FUN('HOLA HOLA'));
END;

--16 CATHA
CREATE OR REPLACE FUNCTION CADENA_REVES_FUN
    (CADENA_FUN VARCHAR2)
RETURN VARCHAR2
IS
    CADENA VARCHAR(30);
    VUELTAS NUMBER:=LENGTH(CADENA_FUN);
BEGIN
LOOP
    CADENA:= CADENA || SUBSTR(CADENA_FUN,VUELTAS, 1);
    VUELTAS:=VUELTAS-1;
    EXIT WHEN VUELTAS = 0;
END LOOP;
RETURN(CADENA);

END;
/

BEGIN DBMS_OUTPUT.PUT_LINE(CADENA_REVES_FUN('CATHA'));
END;
/
SELECT CADENA_REVES_FUN('HOLA MAJO') FROM DUAL;

--17 
CREATE OR REPLACE FUNCTION RETORNAR_FECHA(
    FECHA DATE
)
RETURN VARCHAR2
IS
BEGIN
    RETURN TO_CHAR(FECHA, 'YYYY');

END;
/
SELECT RETORNAR_FECHA('12/12/2023') FROM DUAL;

--18 
CREATE OR REPLACE FUNCTION CALCULAR_IVA(
    VALOR NUMBER, IVA NUMBER DEFAULT 16
)
RETURN NUMBER 
IS
    RESULTADO NUMBER;
BEGIN
    RESULTADO := (VALOR* IVA /100)+ VALOR;
    RETURN RESULTADO;
END;
/

BEGIN 
    DBMS_OUTPUT.PUT_LINE(CALCULAR_IVA(200, 10));
END;
/
SELECT CALCULAR_IVA(12) FROM DUAL;

--19 
/*(1 LE PASO EL IVA DE 21, 2. IVA POR DEFECTO DE 16)*/
SELECT EMP_NO, APELLIDO, SALARIO, CALCULAR_IVA(SALARIO, 21)"CON IVA"
    FROM EMPLE;

SELECT EMP_NO, APELLIDO, SALARIO, CALCULAR_IVA(SALARIO) "IVA 16%"
    FROM EMPLE;