-- 1
DECLARE
    PI CONSTANT NUMBER := 3.1415;
    RADIO NUMBER := &radio;
    LONGITUD NUMBER;
BEGIN
    LONGITUD := (2 * PI * RADIO) / 100;
    DBMS_OUTPUT.PUT_LINE('La longitud expresada en metros es: ' || LONGITUD);

END;
/

CREATE OR REPLACE PROCEDURE CIRCUNFERENCIA(
    RADIO NUMBER
)
IS
    PI CONSTANT NUMBER := 3.1415;
    LONGITUD NUMBER;

BEGIN
    LONGITUD := (2 * PI * RADIO) / 100;
    DBMS_OUTPUT.PUT_LINE('La longitud expresada en metros es: ' || LONGITUD);
END;
/
EXECUTE CIRCUNFERENCIA(45);


-- 2
DECLARE
    V_EMP_NO NUMBER := &emp_no
    V_SALARIO EMPLE.SALARIO%TYPE;

BEGIN
    SELECT SALARIO INTO V_SALARIO FROM EMPLE WHERE EMP_NO = V_EMP_NO;

    DBMS_OUTPUT.PUT_LINE('El salario es: ' || V_SALARIO);

END;
/

CREATE OR REPLACE PROCEDURE OBTENER_SALARIO(
    V_EMP_NO NUMBER
)
IS
    V_SALARIO NUMBER;

BEGIN
    SELECT SALARIO INTO V_SALARIO
        FROM EMPLE
        WHERE EMP_NO = V_EMP_NO;

    DBMS_OUTPUT.PUT_LINE('El salario es: ' || V_SALARIO);

END;
/
EXECUTE OBTENER_SALARIO(7839);

create or replace procedure obtener_salary(v_emp_ no emple.emp_no%type) is v_var2 number; 
begin select salario into v_var2 from emple where emp_no = v_emp_no;
dbms_output.put_line(TO_CHAR(sysdate, 'DAY DD " del " MM YYYY') || ' - ' || v_var2); 
end;

-- 3
DECLARE
    V_COD ASIGNATURAS.COD%TYPE := &cod;
    V_NOMBRE ASIGNATURAS.NOMBRE%TYPE;

BEGIN
    SELECT NOMBRE INTO V_NOMBRE
        FROM ASIGNATURAS
        WHERE COD = V_COD;

    DBMS_OUTPUT.PUT_LINE('El nombre de la asignatura es: ' || V_NOMBRE);
END;
/

CREATE OR REPLACE PROCEDURE NOMBRE_ASIGNATURA(
    V_COD ASIGNATURAS.COD%TYPE
)
IS
    V_NOMBRE ASIGNATURAS.NOMBRE%TYPE;

BEGIN
    SELECT NOMBRE INTO V_NOMBRE
        FROM ASIGNATURAS
        WHERE COD = V_COD;

    DBMS_OUTPUT.PUT_LINE('El nombre de la asignatura es: ' || V_NOMBRE);

END;
/
EXECUTE NOMBRE_ASIGNATURA(7);


-- 4
DECLARE 
    V_DNI PROFESORES.DNI%TYPE := &dni;
    V_APELLIDOS PROFESORES.APELLIDOS%TYPE;

BEGIN
    SELECT APELLIDOS INTO V_APELLIDOS
        FROM PROFESORES
        WHERE DNI = V_DNI;

    DBMS_OUTPUT.PUT_LINE('El nombre del profesor es: ' || V_APELLIDOS);

END;
/

CREATE OR REPLACE PROCEDURE NOMBRE_PROFESOR(
    V_DNI PROFESORES.DNI%TYPE
)
IS 
    V_APELLIDOS PROFESORES.APELLIDOS%TYPE;

BEGIN
    SELECT APELLIDOS INTO V_APELLIDOS
        FROM PROFESORES
        WHERE DNI = V_DNI;

    DBMS_OUTPUT.PUT_LINE('El nombre del profesor es: ' || V_APELLIDOS);

END;
/
EXECUTE NOMBRE_PROFESOR(7650000);


-- 5
DECLARE
    V_DEPT_NO DEPART.DEPT_NO%TYPE;
    V_DNOMBRE DEPART.DNOMBRE%TYPE := '&nombre';
    V_LOC DEPART.LOC%TYPE;

BEGIN
    SELECT DEPT_NO, LOC INTO V_DEPT_NO, V_LOC
        FROM DEPART
        WHERE UPPER(DNOMBRE) = UPPER(V_DNOMBRE);

    DBMS_OUTPUT.PUT_LINE('El departamento n. ' || V_DEPT_NO || ' esta en ' || V_LOC);

END;
/

CREATE OR REPLACE PROCEDURE INFO_DEPT(
    V_DNOMBRE DEPART.DNOMBRE%TYPE;
)
IS
    V_DEPT_NO DEPART.DEPT_NO%TYPE;
    V_LOC DEPART.LOC%TYPE;

BEGIN
    SELECT DEPT_NO, LOC INTO V_DEPT_NO, V_LOC
        FROM DEPART
        WHERE UPPER(DNOMBRE) = UPPER(V_DNOMBRE);

    DBMS_OUTPUT.PUT_LINE('El departamento n. ' || V_DEPT_NO || ' esta en ' || V_LOC);

EXCEPTION
    WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('No se ha encontrado el departamento ' || V_DNOMBRE);

END;
/
EXECUTE INFO_DEPT('ventas');


-- 6
DECLARE
    V_EMP_NO EMPLE.EMP_NO%TYPE := &emp_no;
    V_APELLIDO EMPLE.APELLIDO%TYPE := '&apellido';
    V_OFICIO EMPLE.OFICIO%TYPE := '&oficio';
    V_DEPT_NO EMPLE.DEPT_NO%TYPE := &dept_no;

BEGIN
    INSERT INTO EMPLE VALUES(V_EMP_NO, V_APELLIDO, V_OFICIO, NULL, NULL, NULL, NULL, V_DEPT_NO);

    DBMS_OUTPUT.PUT_LINE('Empleado creado correctamente.');
    
END;
/

CREATE OR REPLACE PROCEDURE CREAR_EMPLEADO(
    V_EMP_NO NUMBER, V_APELLIDO VARCHAR, V_OFICIO VARCHAR, V_DEPT_NO NUMBER
)
IS
BEGIN
    INSERT INTO EMPLE VALUES(V_EMP_NO, V_APELLIDO, V_OFICIO, NULL, NULL, NULL, NULL, V_DEPT_NO);

    DBMS_OUTPUT.PUT_LINE('Empleado creado correctamente.');

END;
/
EXECUTE CREAR_EMPLEADO(9999, 'PEREZ', 'ANALISTA', 10);


-- 7
DECLARE
    V_OFICIO EMPLE.OFICIO%TYPE := '&oficio';

BEGIN
    UPDATE EMPLE
        SET SALARIO = SALARIO + 200
        WHERE OFICIO = UPPER(V_OFICIO);

END;
/

CREATE OR REPLACE PROCEDURE SUBIR_SUELDO(
    V_OFICIO EMPLE.OFICIO%TYPE
)
IS
BEGIN
    UPDATE EMPLE
        SET SALARIO = SALARIO + 200
        WHERE OFICIO = UPPER(V_OFICIO);
END;
/
EXECUTE SUBIR_SUELDO('aNaLiStA');


-- 8
DECLARE
    V_EMP_NO EMPLE.EMP_NO%TYPE := &emp_no;

BEGIN
    DELETE FROM EMPLE
        WHERE EMP_NO = V_EMP_NO;

END;
/

CREATE OR REPLACE PROCEDURE BORRAR_EMPLEADO(
    V_EMP_NO EMPLE.EMP_NO%TYPE
)
IS
BEGIN
    DELETE FROM EMPLE
        WHERE EMP_NO = V_EMP_NO;

    DBMS_OUTPUT.PUT_LINE('Empleado borrado correctamente.');
END;
/
EXECUTE BORRAR_EMPLEADO(9999);


-- 9
DECLARE

BEGIN
    DELETE FROM ASIGNATURAS
        WHERE COD > 5;
    DBMS_OUTPUT.PUT_LINE('Eliminadas ' || SQL%ROWCOUNT || ' filas.');

END;
/

CREATE OR REPLACE PROCEDURE BORRAR_ASIGNATURAS
IS
BEGIN
    DELETE FROM ASIGNATURAS
        WHERE COD > 5;
    DBMS_OUTPUT.PUT_LINE('Eliminadas ' || SQL%ROWCOUNT || ' filas.');

END;
/
EXECUTE BORRAR_ASIGNATURAS;


-- 10
DECLARE 
    V_EMP_NO EMPLE.EMP_NO%TYPE := &emp_no;
    V_SALARIO EMPLE.SALARIO%TYPE;

BEGIN
    SELECT SALARIO INTO V_SALARIO
        FROM EMPLE
        WHERE EMP_NO = V_EMP_NO;

    DBMS_OUTPUT.PUT_LINE('Antes: ' || V_EMP_NO || ', ' || V_SALARIO);

    IF V_SALARIO >  1200 THEN
        UPDATE EMPLE
            SET SALARIO = SALARIO * 1.2
            WHERE EMP_NO = V_EMP_NO;

    ELSE
        UPDATE EMPLE
            SET SALARIO = SALARIO * 1.25
            WHERE EMP_NO = V_EMP_NO;
    END IF;

    SELECT SALARIO INTO V_SALARIO
        FROM EMPLE
        WHERE EMP_NO = V_EMP_NO;

    DBMS_OUTPUT.PUT_LINE('Despues: ' || V_EMP_NO || ', ' || V_SALARIO);
END;
/

CREATE OR REPLACE PROCEDURE CAMBIAR_SUELDO(
    V_EMP_NO EMPLE.EMP_NO%TYPE
)
IS
    V_SALARIO EMPLE.SALARIO%TYPE;

BEGIN
    SELECT SALARIO INTO V_SALARIO
        FROM EMPLE
        WHERE EMP_NO = V_EMP_NO;

    DBMS_OUTPUT.PUT_LINE('Antes: ' || V_EMP_NO || ', ' || V_SALARIO);

    IF V_SALARIO >  1200 THEN
        UPDATE EMPLE
            SET SALARIO = SALARIO * 1.2
            WHERE EMP_NO = V_EMP_NO;

    ELSE
        UPDATE EMPLE
            SET SALARIO = SALARIO * 1.25
            WHERE EMP_NO = V_EMP_NO;
    END IF;

    SELECT SALARIO INTO V_SALARIO
        FROM EMPLE
        WHERE EMP_NO = V_EMP_NO;

    DBMS_OUTPUT.PUT_LINE('Despues: ' || V_EMP_NO || ', ' || V_SALARIO);

END;
/
EXECUTE CAMBIAR_SUELDO(7499);


-- 11
DECLARE
    NUM NUMBER := &num;

BEGIN
    CASE 
        WHEN NUM = 1 THEN
            DBMS_OUTPUT.PUT_LINE('Portero');
        WHEN NUM = 2 OR NUM = 3 THEN
            DBMS_OUTPUT.PUT_LINE('Defensa central');
        WHEN NUM = 4 THEN
            DBMS_OUTPUT.PUT_LINE('Centrocampista');
        WHEN NUM = 5 OR NUM = 6 THEN
            DBMS_OUTPUT.PUT_LINE('Lateral');
        WHEN NUM = 7 OR NUM = 11 THEN
            DBMS_OUTPUT.PUT_LINE('Extremo');
        WHEN NUM = 8 OR NUM = 10 THEN
            DBMS_OUTPUT.PUT_LINE('Delantero interior');
        WHEN NUM = 9 THEN
            DBMS_OUTPUT.PUT_LINE('Delantero centro');
    END CASE;

END;
/

CREATE OR REPLACE PROCEDURE FUTBOLISTA(
    NUM NUMBER
)
IS
BEGIN
    CASE 
        WHEN NUM = 1 THEN
            DBMS_OUTPUT.PUT_LINE('Portero');
        WHEN NUM = 2 OR NUM = 3 THEN
            DBMS_OUTPUT.PUT_LINE('Defensa central');
        WHEN NUM = 4 THEN
            DBMS_OUTPUT.PUT_LINE('Centrocampista');
        WHEN NUM = 5 OR NUM = 6 THEN
            DBMS_OUTPUT.PUT_LINE('Lateral');
        WHEN NUM = 7 OR NUM = 11 THEN
            DBMS_OUTPUT.PUT_LINE('Extremo');
        WHEN NUM = 8 OR NUM = 10 THEN
            DBMS_OUTPUT.PUT_LINE('Delantero interior');
        WHEN NUM = 9 THEN
            DBMS_OUTPUT.PUT_LINE('Delantero centro');
    END CASE;

END;
/
EXECUTE FUTBOLISTA(8);


-- 12
DECLARE
    NUM1 NUMBER := &num1;
    NUM2 NUM1%TYPE := &num2;

BEGIN
    IF NUM1 > NUM2 THEN
        DBMS_OUTPUT.PUT_LINE(NUM1 || ' > ' || NUM2);
    ELSIF NUM1 < NUM2 THEN
        DBMS_OUTPUT.PUT_LINE(NUM1 || ' < ' || NUM2);
    ELSE
        DBMS_OUTPUT.PUT_LINE(NUM1 || ' = ' || NUM2);
    END IF;

END;
/

CREATE OR REPLACE PROCEDURE MAYOR_MENOR(
    NUM1 NUMBER, NUM2 NUMBER
)
IS
BEGIN
    IF NUM1 > NUM2 THEN
        DBMS_OUTPUT.PUT_LINE(NUM1 || ' > ' || NUM2);
    ELSIF NUM1 < NUM2 THEN
        DBMS_OUTPUT.PUT_LINE(NUM1 || ' < ' || NUM2);
    ELSE
        DBMS_OUTPUT.PUT_LINE(NUM1 || ' = ' || NUM2);
    END IF;

END;
/
EXECUTE MAYOR_MENOR(1, 2);


-- 13
DECLARE
    NUM NUMBER := &num;

BEGIN
    DBMS_OUTPUT.PUT_LINE('Tiene ' || LENGTH(TO_CHAR(NUM)) || ' cifras.');

END;
/

CREATE OR REPLACE PROCEDURE NUMERO_CIFRAS(
    NUM NUMBER
)
IS
BEGIN
    DBMS_OUTPUT.PUT_LINE('Tiene ' || LENGTH(TO_CHAR(NUM)) || ' cifras.');

END;
/
EXECUTE NUMERO_CIFRAS(1234);


-- 14
DECLARE
    NUM NUMBER := &num;

BEGIN
    FOR I IN REVERSE 0..NUM LOOP
        DBMS_OUTPUT.PUT_LINE(I);
    END LOOP;

END;
/

CREATE OR REPLACE PROCEDURE NUMEROS_INFERIORES(
    NUM NUMBER
)
IS
BEGIN
    FOR I IN REVERSE 0..NUM LOOP
        DBMS_OUTPUT.PUT_LINE(I);
    END LOOP;

END;
/
EXECUTE NUMEROS_INFERIORES(8);


-- 15
DECLARE
    FECHA DATE := '&fecha';

BEGIN
    IF MOD(TO_NUMBER(TO_CHAR(FECHA, 'yyyy')), 4) = 0 AND MOD(TO_NUMBER(TO_CHAR(FECHA, 'yyyy')), 100) != 0 OR MOD(TO_NUMBER(TO_CHAR(FECHA, 'yyyy')), 400) = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Es bisiesto');
    ELSE
        DBMS_OUTPUT.PUT_LINE('No es bisiesto');
    END IF;

END;
/

CREATE OR REPLACE PROCEDURE BISIESTO(
    FECHA DATE
)
IS
BEGIN
    IF MOD(TO_NUMBER(TO_CHAR(FECHA, 'yyyy')), 4) = 0 AND MOD(TO_NUMBER(TO_CHAR(FECHA, 'yyyy')), 100) != 0 OR MOD(TO_NUMBER(TO_CHAR(FECHA, 'yyyy')), 400) = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Es bisiesto');
    ELSE
        DBMS_OUTPUT.PUT_LINE('No es bisiesto');
    END IF;

END;
/
EXECUTE BISIESTO('01/01/2020');
EXECUTE BISIESTO('01/01/2021');